<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
    "http://struts.apache.org/dtds/struts-2.3.dtd">

<struts>
	<!-- constant 配置 start -->
	<!-- 开发模式，提供更多的log信息 --> 
	<constant name="struts.devMode" value="true" />
	<!-- 当struts.xml文件改变后，动态加载  -->
	<constant name="struts.configuration.xml.reload" value="true" />
	<!-- 开启动态方法调用 -->
	<constant name="struts.enable.DynamicMethodInvocation" value="true"/>
	<!-- constant 配置 end -->
	
	<!-- hello world 初识Struts2 -->
	<!-- package节点介绍: 
		package: 物理上区分不同的action, result, interceptor等（类似于Java中的包）。并且便于继承和重写，类似于Java中的对象 
		name: required extends: 共用其他package定义的元素，一般从struts-default（定义了默认的拦截器堆栈，bean等信息）继承 
		namespace: 逻辑上区分不同的action abstract: 抽象，用于继承 
	-->
	<!-- hello world start -->
	<package name="helloworld" extends="struts-default" namespace="/hello">
		<action name="HelloWorld1">
			<result name="success">1_helloworld/hello.jsp</result>
		</action>
		<action name="HelloWorld2" class="com.study.Struts2.helloword.HelloWorld">
			<result name="success">1_helloworld/hello.jsp</result>
		</action>
	</package>
	<!-- hello world end -->
	
	<!-- action start -->
	<!-- 
		action节点介绍：
		name: required 对应浏览器请求路径（除去主机信息和项目名称）。如果name中含有斜杠，需要开启系统常量：<constant name="struts.enable.SlashesInActionNames" value="true"/>
		class: 请求处理类
		method: 请求处理方法，默认execute
		action用来在请求处理类和请求之间建立映射关系。在action中可以配置多个result，多个exception和一个拦截器堆栈
	 -->
	<package name="action" extends="struts-default" namespace="/action">
		<!-- 如果在当前namespace下没有与请求匹配的action对应，将会调用default action 配置-->
		<!-- **必须放在package节点最上面，否则报各种奇葩错误 -->
		<default-action-ref name="basic"/>
		<!-- 
			如果没有为某个Action指定具体的class值时，系统将自动引用<default-class-ref>标签中所指定的类 
			Struts将ActionSupport作为默认action类
			 等同于 <action name="default" class="com.opensymphony.xwork2.ActionSupport">
		-->
		<default-class-ref class="com.study.Struts2.action.BasicAction"/>
		
		<!-- 默认action配置，无需配置class，Struts将default-class-ref指定的class最为默认action处理类-->
		<action name="default">
			<result name="success">2_action/index.jsp</result>
		</action>
		<!-- 普通action类，一个普通java类，拥有成员方法String execute()即可。Struts通过反射执行execute方法-->
		<action name="normal" class="com.study.Struts2.action.NormalAction">
			<result name="success">2_action/index.jsp</result>
		</action>
		<!-- 一般Struts Action class 都是通过集成ActionSupport来实现 -->
		<action name="basic" class="com.study.Struts2.action.BasicAction">
			<result name="success">2_action/default.jsp</result>
		</action>
	</package>
	<!-- action end -->
	
	<!-- action method start -->
	<package name="method" extends="struts-default" namespace="/method">
		<default-action-ref name="index"/>
		<!-- method 方法调用 start -->
		<action name="index" class="com.study.Struts2.action.method.MethodAction">
			<result name="success">/3_method/index.jsp</result>
		</action>
		<action name="query" class="com.study.Struts2.action.method.MethodAction" method="query">
			<result>/3_method/method_query.jsp</result>
		</action>
		<action name="update" class="com.study.Struts2.action.method.MethodAction" method="update">
			<result>/3_method/method_update.jsp</result>
		</action>
		<action name="delete" class="com.study.Struts2.action.method.MethodAction" method="delete">
			<result>/3_method/method_delete.jsp</result>
		</action>
		<action name="add" class="com.study.Struts2.action.method.MethodAction" method="add">
			<result>/3_method/method_add.jsp</result>
		</action>
		<!-- method 方法调用 end -->
		<!-- 通配符调用 start -->
		<action name="_*" class="com.study.Struts2.action.method.MethodAction" method="{1}">
			<result>/3_method/method_{1}.jsp</result>
		</action>
		<!-- 通配符调用 end -->
		<!-- 动态方法调用 start-->
		<!-- 
			使用action名称（指前端请求的action名称）中“!”后的字符串表示要调用的方法名。 
			struts.xml action配置可采用以上任一种形式，需要改变的是前端页面请求的action名称。
			只需要开启struts.enable.DynamicMethodInvocation变量。
			动态方法调用并不推荐使用，主要有两个原因：
				1 如果使用POJO作为action会引起安全性问题
				2 与通配符重叠
			在Struts2.3x中 在package元素中新增属性strict-method-invocation来限制动态方法调用，并且每个action所允许的动态调用的方法名称
			需在<allowed-methods>xxx</allowed-methods>中说明，用逗号分隔
		-->
		<!-- 动态方法调用 end-->
		<!-- param子元素为action传递参数 -->
		<!-- 
			通过${paramName}的形式在action中指定动态的结果
			paramName为action class的属性，并且带有getter-setter方法
		 -->
		<action name="param" class="com.study.Struts2.action.ParamAction">
			<result name="success">${type}</result>
			<!-- /3_method/method_add.jsp only for test -->
			<param name="type">/3_method/method_add.jsp</param>
		</action>
	</package>
	<!-- action method end -->
	<!-- action access servlet api start -->
	<package name="servletapi" extends="struts-default" namespace="/servletapi">
		<action name="index">
			<result>/4_servletapi/index.jsp</result>
		</action>
		<!-- 通过ActionContext访问Servlet API -->
		<action name="actioncontext" class="com.study.Struts2.action.servlet.ByActionContext">
			<result>/4_servletapi/result.jsp</result>
		</action>
		<!-- 通过ServletActionContext访问Servlet API -->
		<!-- 不推荐使用 -->
		<action name="servletactioncontext" class="com.study.Struts2.action.servlet.ByServletActionContext">
			<result>/4_servletapi/result.jsp</result>
		</action>
		<!-- 通过实现RequestAware，SessionAware，ApplicationAware接口，依赖Struts注入方式访问Servlet API -->
		<!-- 最常用 -->
		<action name="ioc" class="com.study.Struts2.action.servlet.ByIOC">
			<result>/4_servletapi/result.jsp</result>
		</action>
	</package>
	<!-- action access servlet api end -->
	
	<!-- action result start -->
	<package name="result" extends="struts-default" namespace="/result">
		<!--
			在Struts中，所有充当Action类必须包含1或多个返回值为String的公有无参方法，其返回值就是用来选择返回结果。
			在ActionSupport中默认定义了5中类型的result：
				String SUCCESS = "success";
				String NONE = "none";
				String ERROR = "error";
				String INPUT = "input";
				String LOGIN = "login";
			当然，你也可以自定义result。
			节点介绍：
				result：
					name: 对应Action 方法的返回值
					type: 由result-type 指定
					param: 其他参数
			
			在package下面可以定义result-type。
				result-type:
					name: type名称
					class: 对应的全限定类名
					default: 是否为默认类型
			在struts-default package中定义了11中result type，所以一般情况下是不需要我们手动指定的。
			<result-types>
	            <result-type name="chain" class="com.opensymphony.xwork2.ActionChainResult"/>
	            <result-type name="dispatcher" class="org.apache.struts2.dispatcher.ServletDispatcherResult" default="true"/>
	            <result-type name="freemarker" class="org.apache.struts2.views.freemarker.FreemarkerResult"/>
	            <result-type name="httpheader" class="org.apache.struts2.dispatcher.HttpHeaderResult"/>
	            <result-type name="redirect" class="org.apache.struts2.dispatcher.ServletRedirectResult"/>
	            <result-type name="redirectAction" class="org.apache.struts2.dispatcher.ServletActionRedirectResult"/>
	            <result-type name="stream" class="org.apache.struts2.dispatcher.StreamResult"/>
	            <result-type name="velocity" class="org.apache.struts2.dispatcher.VelocityResult"/>
	            <result-type name="xslt" class="org.apache.struts2.views.xslt.XSLTResult"/>
	            <result-type name="plainText" class="org.apache.struts2.dispatcher.PlainTextResult" />
	            <result-type name="postback" class="org.apache.struts2.dispatcher.PostbackResult" />
        	</result-types>
			
			type功能：
				dispatcher: 默认类型，
				chain:
				freemarker:
				redirect:
				redirectAction:
				freemarker: 
		 -->
		<action name="index">
			<result>/5_result/index.jsp</result>
		</action>
	</package>	
	<!-- action result end -->
</struts>